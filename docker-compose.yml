version: '3.9'
services:
    postgresql:
        stop_grace_period: 3s
        restart: unless-stopped
        env_file:
            - .env
        build:
            context: .
            target: postgresql
            args:
                - password=${PSQL_PASSWORD}
                - database=${PSQL_DATABASE}
        healthcheck:
            test: ['CMD', 'pg_isready', '-U', 'postgres']
        # volumes:
        #     - "./containers/postgresql/log:/var/log/postgresql"
        #     - "./containers/postgresql/data:/var/lib/postgresql"
        networks:
            - backend
        expose:
            - 5432
    backend:
        command: bash -c 'yarn install && yarn run start'
        stop_grace_period: 3s
        depends_on:
            - postgresql
        restart: unless-stopped
        env_file: .env
        build:
            context: .
            target: backend
        volumes:
            - ./NJMPU-API:/app
        networks:
            - backend
            - frontend
        expose:
            - 3000
    frontend:
        command: bash -c 'bash /nginx.sh && yarn install && yarn run build && nginx -g "daemon off;"'
        stop_grace_period: 3s
        depends_on:
            - backend
        restart: unless-stopped
        env_file: .env
        build:
            context: .
            target: frontend
        volumes:
            - ./NJMPU-FRONT:/app
            - ./NJMPU-API/${IMG_PATH}:/app/dist/pictures:r
            - ./Docker/nginx/nginx.sh:/nginx.sh:r
            - ./Docker/nginx/nginx.conf:/etc/nginx/nginx.conf.template:r
            - ./Docker/nginx/app.conf:/etc/nginx/sites-enabled/default:r
            - ./Docker/nginx/log:/var/log/nginx
        networks:
            - backend
            - frontend
        expose:
            - 443
        ports:
            - 443:443

networks:
    backend:
        internal: true
    frontend:
